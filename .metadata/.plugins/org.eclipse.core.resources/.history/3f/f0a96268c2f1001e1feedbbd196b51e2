/*
#강의 내용 정리
1.상속이란
부모클래스의 필드와 메서드를 자식 클래스가 물려받는 것을 말한다.

2.상속은 부모의 필드와 메서드를 받기 때문에
만약에 부모의 필드 또는 메서드를 수정하게 된다면
자식 클래스도 수정해야하기 때문에
코드 의존성이 높아진다.
따라서, 왠만하면 코딩할 때 최대한 독립적으로 코딩하는게 좋다.
그래야 코드 의존성이 낮아진다.

3.C++에서는 다중상속이 있지만, 자바에서는 없다.
다중상속은 코드 의존성을 낮춘다.

4.Composition Vs 상속
Composition은 상속보다 코드 의존성이 낮다.

5.자바에서 상속은 extends 부모 클래스로 상속받을 수 있다.

6.자식 클래스는 부모 클래스의 필드 중에서 private 접근 권한을 가진 필드
접근할 수 없다.

6-1.(기억)private은 무조건 해당 클래스 안에서만 가능하다.
(자식에서 사용x)

7.자식에서 부모의 public 메서드를 사용할 수 있다.

8.자바는 클래스의 다중 상속을 지원하지 않는다.
c++는 다중 상속을 지원하지만 다중상속을 잘 사용하지는 않는다.

9.상속의 최상위 조상 클래스는 java.lang.Object클래스이다.
모든 클래스의 최상위 부모가 Object 클래스라고 기억하면 된다.

10.슈퍼클래스, 서브클래스 = 부모클래스, 자식클래스

11.(기억)protected 멤버는 다른 패키지에 있어도
자식클래스에서 접근이 가능하다.
+)상속을 고려한 protected 코딩 습관은 좋지 않다.
코드 의존성이 높아지고, 코딩할 때는 접근권한을 줄이는 방향으로 해야한다.

12.(중요)객체의 생성은 곧 생성자의 호출이다.
자식 객체가 생성되면 곧 부모 생성자가 호출되고
부모 생성자가 실행되며 이후 마지막으로 자식 생성자가 실행된다.
그러므로, 자식 객체가 존재할 수 있게 된다.
이 과정에서 내부적으로 부모가 만들어졌기 때문이다.

13.(중요,기억, 규칙이라 기억해야됨)자식 클래스에서 부모클래스의 생성자를 선택하지 않는경우
기본적으로 컴파일러가 부모클래스의 기본생성자를 선택하게 된다.

14.자식클래스에서 부모클래스의 생성자를 선택하는 방법은
super(매개변수)를 사용하면 된다.
이때, super()는 반드시 자식클래스 생성자 코드의
제일 첫 라인에 와야한다.

15.is-a관계:
사람은 생물이다.(o)
생물은 사람이다.(x)
생물은 사람에 비해 큰 범위이다.
부모가 생물이고 사람이 자식이다.
이러한 상속관계이자 일방향 관계를 is-a관계라고 한다.

16.업캐스팅
사람(부모 클래스)
교수, 연구자, 학생 (서로 다른 타입, 자식클래스)

교수 p = new 교수();
연구자 r = new 연구자();
학생 s = new 학생();

지금 이 상태에서 서로 타입이 다르기 때문에
하나의 배열로 못 묶는다.
또한, 타입이 달라 반복문도 실행을 못하고
동일한 메서드에 대해
method(교수p);
method(연구자r);
method(학생s);
와 같이 중복이 많아진다.

이러한 한계를 부모 클래스 타입인 사람타입이면 가능하다.
즉, 
사람 p1 = new 교수();
사람 p2 = new 연구자();
사람 p3 = new 학생();
이러면 참조변수의 배열의 타입이 같아지게 되는데
부모 타입 가지고 자식 타입을 한 번에 처리할 수 있게 된다.
사람배열->[사람타입 p1, 사람타입 p2, 사람타입 p3]와 같이
배열로 묶을 수 있게 되고
각각은 서로 다른 타입의 자식 타입을 참조하게 된다.

그러면 반복문을 사용하여 method(사람 p)로 
서로 다른 타입의 자식들을 부모타입으로
한번에 method를 처리할 수 있게 된다.

이와 같은 방법을 업캐스팅이라고 한다.
(책에서는)업캐스팅이란 자식클래스의 객체를 부모클래스 타입으로 변환하는 것을 의미한다.
(책에서는)업캐스팅된 레퍼런스는 객체 내에 부모 클래스 멤버에만 접근이 가능하다.
예를 들면
부모 Person-자식 Student 관계에서
Student에서 Person으로 업캐스팅된 객체를 참조하는 변수가 있다고 생각할 때
해당 참조변수는 반드시 부모의 멤버만 접근이 가능하다.
자식 멤버에 접근하면 에러다.

Person
name, id

Student
grade, department

Person p1 = new Student();
p1.grade는 안된다. (컴파일 에러가 난다)
부모만 접근이 가능해서 p1.name만 가능하다.

17.다운캐스팅이란 부모타입에서 자식타입으로 변환하는 것을 의미한다.
다운캐스팅은 명시적으로 사용해야한다.

Person p = new Student(); //업캐스팅
Student s = (Student)p; //다운캐스팅
다운캐스팅된 참조변수 s는 s.자식멤버에 접근이 가능하다.
또한, ((Student)p).자식 멤버에 접근이 가능하다.
위 처럼 접근하면 반드시 괄호가 있어야한다.

18.다운캐스팅은 항상 조심해야한다.
다운캐스팅시 언제나 타입체크를 먼저해야한다.

만약에
부모 A
자식 B, C
A a = new B();//업캐스팅
(C)a->컴파일 에러는 안남. 다만 런타임 에러가 발생.

19.따라서, instanceof연산자가 존재하는데
객체레퍼런스 instanceof 클래스타입 ->true or false
객체레퍼런스가 클래스타입으로 변환 가능한지의 여부.

#몰랐던 개념 정리
1.this.x = this.y = 0;이런 문법도 가능하다!


#문제풀이 개념정리
1.자식클래스의 객체 생성->부모클래스 생성자 호출->부모클래스 private 사용가능.





*/