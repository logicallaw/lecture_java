/*
#강의 내용 정리
1.키 이벤트 받는 조건
:모든 컴포넌트 가능하지만, 현재 포커스를 가진 컴포넌트만 가능하다.
2.키는 다음 세가지 경우 key이벤트가 발생한다.
:키를 누를때, 키를 누를때(유니코드의 키), 키를 떼는 순간
3.포커스 주는법
컴포넌트.setFocuseable(true);
컴포넌트.requestFocuse();
4.스윙 프레임 생성후 바로 컨텐트 팬에 키 포커스 주는법
setVisible(true);
c.setFocuseable(true);
c.requestFocuse();
위 코드 순서대로 작성하면 컨텐트팬에 포커스 줄 수 있다.
5.키는 두 가지 종류가 있다.
유니코드 키/유니코드 아닌 키(가상 키)
유니코드가 아닌 키에 대해 가상 키 코드 값이 정수값으로 정의되어있어 사용이 가능하다.
보통 가상 키코드 값은 VK_이름으로 정수값이 정의되어있다.
6.키의 문자 코드 알아내는법
이벤트 객체에 대해 e.getKeyChar()로 char로 리턴받을 수 있다.
7.가상 키 코드 알아내는법
이벤트 객체에 대해 e.getKeyCode()로 정수값으로 리턴받거나
가상 키 코드는 static 메서드를 사용하기에 KeyEvent.getKeyCode()로 
클래스 이름으로 바로 접근이 가능하다.
8.(주의)keyTyped()메서드
:애초에 설계 자체가 유니코드 이벤트에 대응하는 메서드라 가상 키 코드가 눌러질 때는 호출되지 않는다.
유니코드 이벤트 발생해서 keyTyped()메서드가 실행되고 해당 이벤트에 대해 
getKeyCode()메서드를 사용하면 리턴값이 VK_UNDEFINED을 받게 된다.
9.mouseDragged()/mouseMoved()메서드
:Dragged 메서드는 마우스를 누른 상태에서 이동할 때 발생하고
Moved 메서드는 마우스를 누르지 않고 커서가 이동할 때마다 발생하는 메서드이다.
10.(중요)마우스 리스너 등록은 각 마우스 인터페이스별 리스너의 명이 다르기 때문에
각각 인터페이스에 맞는 이벤트 리스너를 따로 등록해줘야한다.
11.getClickCount() 메서드는 마우스 커서가 움직이는 상태에서 몇 번 클릭했냐.
클릭할 때마다 카운트가 올라간다.
보통 getClickCount메서드는 더블클릭을 잡기 위해 사용한다.
12.마우스 버튼은 보통 3개라서 각 마우스 버튼별 미리 정수값이 정의되어 있다.
만약, 마우스 버튼이 4개 이상인 마우스라면 기존 정의되어 있는 3개의 마우스 버튼별 정수값 아래에
추가로 생성되어서 4개 이상이더라도 정수를 사용할 수 있다.
13.(중요)마우스 이벤트에 대한 리스너 클래스는 여러 인터페이스를 상속받아 구현할 수 있지만,
컴포넌트에 마우스 이벤트를 등록할 때는 이벤트별 리스너명이 다르기 때문에
각각 등록해줘야한다.
14.인터페이스를 구현하는 이벤트 클래스는 반드시 해당 인터페이스의 추상클래스를 오버라이딩 해야만 한다.
15.마우스 휠의 방향 구분은 이벤트 객체에 대한 e.getWheel(Rotation())의 리턴값을 사용하여
음수 리턴시 마우스 휠은 아래로, 양수 리턴시 마우스 휠은 위로 이동한 것을 의미한다.
16.(중요)만약에 % 비교를 가상 키 코드값으로 비교한다면
shift키를 누르는 순간의 가상 키 코드는 shift키에 대한 코드값이 리턴되고
여기서 누르는 상태에서 5를 눌렀을 때 가상 키 코드는 숫자 5에 대한 가상 키 코드 값이 리턴된다.
shift키와 5키를 조합한 문자에 대한 가상 키 코드 값은 없다는게 특징이다.
왜냐면 키보드 키는 하나에 하나씩 동작하기 때문에 따라서, shift키를 이용해
조합된 문자를 비교할 때는 가상 키 코드 값이 아닌 유니코드 값으로 비교를 해야만 한다.
*/